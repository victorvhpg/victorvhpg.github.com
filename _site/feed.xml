<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Victor Hugo de Paiva Gonçales - victorvhpg</title>
    <description>Victor Hugo de Paiva Gonçales - victorvhpg 
</description>
    <link>https://victorvhpg.github.io//</link>
    <atom:link href="https://victorvhpg.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 25 Jan 2015 17:56:48 -0200</pubDate>
    <lastBuildDate>Sun, 25 Jan 2015 17:56:48 -0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Configurando Git no servidor - &quot;smart&quot; HTTP</title>
        <description>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-tB9s94zI3RY/VKXbdU1QY_I/AAAAAAAAAz0/jBXXn4BC7EI/s1600/git.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-tB9s94zI3RY/VKXbdU1QY_I/AAAAAAAAAz0/jBXXn4BC7EI/s1600/git.png&quot; height=&quot;133&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Hoje vou demonstrar como configurar o Git num servidor Linux usando Apache como server, com o protocolo HTTP(&quot;smart&quot; HTTP),&amp;nbsp; permitindo a colaboração dos membros de sua equipe. &lt;br /&gt;Tenho utilizado Git há 4 anos em projetos particulares e nos meus experimentos, no trabalho utilizo uma &quot;solução&quot; da Microsoft. Sem duvida nenhuma Git&amp;nbsp; é o melhor controle de versão existente, não da&amp;nbsp; nem pra comparar com os outros, Git é de longe o melhor, não há motivos técnicos para não usá-lo, além de ser muito simples aprender a utiliza-lo (a menos que você seja apenas um usuário de IDE que só sabe clicar, igual um macaco treinado LOL... ai fica um pouco difícil, mas vai acabar sendo treinado com o tempo). Nunca precisei configurar um servidor Git, pois utilizo serviços como GitHub e Bitbucket, mas configurar o Git num servidor pra rodar numa intranet é bem simples e pode ser feito de várias maneiras.&lt;br /&gt;O Git suporta os seguintes protocolos: Local, HTTP(&quot;smart&quot; HTTP), SSH e protocolo Git. Atualmente o protocolo HTTP (&quot;smart&quot; HTTP) tem sido o mais utilizado. Ele é chamado de &quot;smart&quot; HTTP pois antigamente&amp;nbsp; existia o suporte HTTP, mas ele era muito limitado, mas na versão 1.6.6 do Git, o suporte ao protocolo HTTP recebeu grandes melhorias, tornando-se excelente, ficando conhecido como &quot;smart&quot; HTTP, com ele você pode ter acesso anônimo ou autenticado com criptografia.&lt;br /&gt;Para rodar o Git com o protocolo HTTP é necessário um servidor com suporte a CGI, pois quem vai fazer todo o trabalho é um script CGI chamado&lt;i&gt; git-http-backend&lt;/i&gt; que já vem junto com o Git, eu utilizei o Apache mas poderia ser qualquer outro servidor com suporte a CGI.&lt;br /&gt;&lt;br /&gt;O que foi utilizado nesta demonstração:   &lt;br /&gt;&lt;ul&gt;&lt;li&gt; Ubuntu  14.04-LTS&lt;/li&gt;&lt;li&gt; Git  2.2.1&lt;/li&gt;&lt;li&gt; Apache  2.4.7&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Instalando o Git&lt;/h2&gt;Você pode instalar o Git com   apt-get  ou se você quiser  a versão mais recente do Git, você pode baixar o código-fonte dele e compilar. &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/5853429a825c94314884&quot;&gt;&lt;/div&gt;Recomendo que compile a ultima versão, depois você pode clonar o repositório do Git, e fazer um &lt;i&gt;pull&lt;/i&gt; ou &lt;i&gt;fetch+merge&lt;/i&gt;  para receber as atualizações direto do repositório.  &lt;br /&gt;git clone git://git.kernel.org/pub/scm/git/git.git    &lt;br /&gt;&lt;h2&gt;  Configuração do servidor Apache &lt;/h2&gt;Para instalar o Apache:  &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/8e86b101b4d75699536b&quot;&gt;&lt;/div&gt;Habilitar módulos  mod_cgi, mod_alias, mod_env e auth_digest do Apache:  &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/8059d94d61b34bd90aa9&quot;&gt;&lt;/div&gt;Depois de ter instalado o apache e os módulos, é necessário criar um &quot;Virtual Host&quot; onde o Git rodará na intranet, eu utilizei este domínio de exemplo: http://git.exemplo/, para fins de testes eu configurei o meu /etc/hosts com este domínio.  &lt;br /&gt;&lt;b&gt;Configuração do arquivo &lt;i&gt;/etc/apache2/sites-available/git.conf&lt;/i&gt; :    &lt;/b&gt;&lt;br /&gt;Crie um arquivo  'Virtual Host' chamado git.conf, nele estão setadas variáveis de ambiente do apache para dizer onde estão os repositórios Git, configura o apache para que toda URL que tiver /git seja manipulada pelo CGI &lt;b&gt;git-http-backend&lt;/b&gt; e como o apache deve lidar com a autenticação. &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Local onde estão os repositórios Git:&lt;b&gt; /var/www/git/git&lt;/b&gt; &lt;/li&gt;&lt;li&gt;Local do arquivo de autenticação dos usuários: &lt;b&gt;/var/www/git/.htpasswd&lt;/b&gt; &lt;/li&gt;&lt;/ul&gt;Arquivo /etc/apache2/sites-available/git.conf: &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/2c7b9531920b01119474&quot;&gt;&lt;/div&gt;Obs: O   arquivo &lt;i&gt;&lt;b&gt;/var/www/git/.htpasswd&lt;/b&gt;&lt;/i&gt;  é o arquivo onde estão os usuários, para criar um usuário no apache utilize o comando &lt;b&gt;htdigest&lt;i&gt;&lt;/i&gt;&lt;/b&gt;. Por exemplo:    &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/d646448e542c75d28e85&quot;&gt;&lt;/div&gt;      Após criar o arquivo git.conf  é necessário ativa-lo e reiniciar o apache: &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/1f34693a7e042b87f1cb&quot;&gt;&lt;/div&gt;  &lt;h2&gt;Criando um repositório Git Remoto&lt;/h2&gt;&lt;p&gt;Agora que o servidor já está configurado é necessário criar o repositório remoto. O repositório deve ficar no local que foi configurado no apache: &lt;i&gt;&lt;b&gt;/var/www/git/git&lt;/b&gt;&lt;/i&gt;.  &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/cffaf34b08fdd51fb70d&quot;&gt;&lt;/div&gt;Pronto ;) agora seus amiguinhos podem colaborar neste repositório remoto através da rede utilizando o Git. &lt;br /&gt;    &lt;/p&gt;Um usuário previamente criado no /var/www/git/.htpasswd  que tenha acesso ao servidor na rede, após autenticação pode fazer um &lt;b&gt;git clone&lt;/b&gt; e começar a colaborar neste repositório. &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/b74c50156a4f3960c1c3&quot;&gt;&lt;/div&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/70qOOtwEp80&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br /&gt; &lt;h2&gt;Referências&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols&quot; target=&quot;_blank&quot;&gt; Livro Pro Git - segunda edição &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-http-backend.html&quot; target=&quot;_blank&quot;&gt; https://www.kernel.org/pub/software/scm/git/docs/git-http-backend.html &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://httpd.apache.org/docs/current/howto/auth.html&quot; target=&quot;_blank&quot;&gt; http://httpd.apache.org/docs/current/howto/auth.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; &lt;script&gt; carregaGist.init(); &lt;/script&gt;&lt;br /&gt;</description>
        <pubDate>Fri, 02 Jan 2015 21:54:00 -0200</pubDate>
        <link>https://victorvhpg.github.io//2015/01/02/configurando-git-no-servidor-smart-http.html</link>
        <guid isPermaLink="true">https://victorvhpg.github.io//2015/01/02/configurando-git-no-servidor-smart-http.html</guid>
        
        <category>linux</category>
        
        <category>git</category>
        
        <category>dicas</category>
        
        <category>ubuntu</category>
        
        
      </item>
    
      <item>
        <title>Como criar um plugin jQuery com suporte Asynchronous Module Definition (AMD) - requirejs</title>
        <description>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-3M_nOzpv-g0/VHvtfqqQwlI/AAAAAAAAAzE/6iwy3tjr8qo/s1600/js2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-3M_nOzpv-g0/VHvtfqqQwlI/AAAAAAAAAzE/6iwy3tjr8qo/s320/js2.png&quot; height=&quot;200&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Atualmente várias bibliotecas já oferecem suporte à Asynchronous Module Definition (AMD), tornando mais fácil o uso delas&amp;nbsp; em projetos que já adotam este padrão,&amp;nbsp; podemos usá-las sem a necessidade de &lt;a href=&quot;http://requirejs.org/docs/api.html#config-shim&quot; target=&quot;_blank&quot;&gt;configurar&lt;/a&gt; (&lt;a href=&quot;http://requirejs.org/docs/api.html#config-shim&quot; target=&quot;_blank&quot;&gt;config-shim&lt;/a&gt;) para funcionar.&lt;br /&gt;Abaixo algumas bibliotecas que oferecem suporte  à  AMD:  &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/nnnick/Chart.js/blob/0a59a3c4dfe9950a06cf239a4d9332c73dcbe6cb/src/Chart.Core.js#L1928&quot; target=&quot;_blank&quot;&gt;Chart.js &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mbostock/d3/blob/48ad44fdeef32b518c6271bb99a9aed376c1a1d6/d3.js#L9231&quot; target=&quot;_blank&quot;&gt;D3.js&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/jquery/jquery/blob/10399ddcf8a239acc27bdec9231b996b178224d3/src/exports/amd.js#L19&quot; target=&quot;_blank&quot;&gt;jQuery&lt;/a&gt;&amp;nbsp; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/hammerjs/hammer.js/blob/52d5887386b7ae8aa125ca80facc91023bfac43e/hammer.js#L2453&quot; target=&quot;_blank&quot;&gt;Hammer.js &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ericdrowell/KineticJS/blob/7f853ddc00ce6707231d02ee792ac10849e8cb53/src/Global.js#L398&quot; target=&quot;_blank&quot;&gt; KineticJS  &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/photonstorm/phaser/blob/a6bc859246ca6cab7cd9fd06a8055a99fb6ab8e0/src/Outro.js#L12&quot; target=&quot;_blank&quot;&gt;Phaser &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/wellcaffeinated/PhysicsJS/blob/6fae5d28531a9ab08101d2c6edfc17348b9b42f8/src/intro.js#L7&quot; target=&quot;_blank&quot;&gt;PhysicsJS &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/GoodBoyDigital/pixi.js/blob/61421d2a30b97a674fd04965cae2e5aca5f3c45e/src/pixi/Outro.js#L10&quot; target=&quot;_blank&quot;&gt;Pixi.js &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/DmitryBaranovskiy/raphael/blob/07715d151d8803ee283f6690557349b04625a4d1/dev/raphael.core.js#L11&quot; target=&quot;_blank&quot;&gt;Raphaël &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;Caso você esteja começando agora&amp;nbsp; e nunca ouviu falar de AMD, por favor leia isso antes: &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/amdjs/amdjs-api/blob/master/AMD.md&quot; target=&quot;_blank&quot;&gt;AMD&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://requirejs.org/docs/api.html&quot; target=&quot;_blank&quot;&gt;RequireJS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;Para dar suporte a AMD, sua biblioteca apenas deve registrar um modulo sendo ela mesma. Veja um exemplo:  &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/88fc079e838e569f59cb&quot;&gt;&lt;/div&gt;Para criar um plugin jQuery com suporte a AMD nos temos que fazer o mesmo, porém nos temos uma dependência óbvia, a própria jQuery. jQuery já tem suporte a AMD, ela se auto registra com o modulo chamado &quot;jquery&quot;, então basta apenas nos colocarmos o modulo &quot;jquery&quot; sendo uma  dependência do nosso plugin. &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/84ae66f118e1f588ee62&quot;&gt;&lt;/div&gt;Caso você deseje  que seu plugin  funcione sem ou com AMD, você deve  fazer uma verificação de suporte AMD, ou seja,  é só fazer um &quot;if&quot; &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/6d2df6d9ed5dcade6333&quot;&gt;&lt;/div&gt;Veja como fica a implementação levando em consideração o suporte AMD ou não:     &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/626c806e00c8f3074018&quot;&gt;&lt;/div&gt;Bom é isso, caso você deseja mais exemplos, algum tempo atrás  eu criei um repositório onde eu implementei algumas estruturas básicas de  plugins jQuery, inclusive publiquei no site oficial da fundação jQuery.&lt;br /&gt;abaixo os links:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Repositório&lt;/b&gt;: &lt;a href=&quot;https://github.com/victorvhpg/exemploPlugin&quot; target=&quot;_blank&quot;&gt;https://github.com/victorvhpg/exemploPlugin&lt;/a&gt;&lt;br /&gt;&lt;b&gt;Site oficial jQuery&lt;/b&gt;:  &lt;a href=&quot;http://plugins.jquery.com/exemploPlugin/&quot; target=&quot;_blank&quot;&gt;http://plugins.jquery.com/exemploPlugin/&lt;/a&gt;   &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script&gt;carregaGist.init();&lt;/script&gt; </description>
        <pubDate>Mon, 01 Dec 2014 04:01:00 -0200</pubDate>
        <link>https://victorvhpg.github.io//2014/12/01/como-criar-um-plugin-jquery-com-suporte.html</link>
        <guid isPermaLink="true">https://victorvhpg.github.io//2014/12/01/como-criar-um-plugin-jquery-com-suporte.html</guid>
        
        <category>javascript</category>
        
        <category>amd</category>
        
        <category>jquery</category>
        
        <category>requirejs</category>
        
        <category>dicas</category>
        
        
      </item>
    
      <item>
        <title>JavaScript Promises</title>
        <description>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-HCIWr_HCP-A/VHvuP5pyviI/AAAAAAAAAzI/divCqgQr7Dc/s1600/then.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-HCIWr_HCP-A/VHvuP5pyviI/AAAAAAAAAzI/divCqgQr7Dc/s320/then.png&quot; height=&quot;200&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;   &lt;/div&gt;&lt;h2&gt; Promises&lt;/h2&gt;Promise é uma API nativa JavaScript (ECMAScript 6) que segue a especificação  &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;Promises/A+&lt;/a&gt;,  É um recurso que já está disponível nos navegadores modernos (menos &lt;strike&gt;na  droga do&lt;/strike&gt; IE é claro), e também algumas das novas API que estão sendo padronizadas no W3C. Realmente é algo que todo desenvolvedor deve aprender. Só pra ter uma noção da importância do uso de Promises, segue uma pequena relação das novas APIs que estão nas especificações do W3C/WHATWG que já implementam Promise:  &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://dvcs.w3.org/hg/quota/raw-file/tip/Overview.html#idl-def-StorageQuota&quot; target=&quot;_blank&quot;&gt;Quota Management&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://dev.w3.org/csswg/css-font-loading/#font-face-set-ready&quot; target=&quot;_blank&quot;&gt;Font Load Events&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/service-workers/&quot; target=&quot;_blank&quot;&gt; ServiceWorker&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://webaudio.github.io/web-midi-api/#widl-Navigator-requestMIDIAccess-Promise-MIDIOptions-options&quot; target=&quot;_blank&quot;&gt;Web MIDI&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://streams.spec.whatwg.org/&quot; target=&quot;_blank&quot;&gt;Streams&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/2012/sysapps/tcp-udp-sockets/&quot; target=&quot;_blank&quot;&gt;TCP e UDP Socket&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/nfc/&quot; target=&quot;_blank&quot;&gt;Web NFC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/battery-status/&quot; target=&quot;_blank&quot;&gt; Battery Status&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/2012/sysapps/contacts-manager-api/&quot; target=&quot;_blank&quot;&gt;Contacts Manager &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/telephony/&quot; target=&quot;_blank&quot;&gt;Web Telephony&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/2012/sysapps/messaging/&quot; target=&quot;_blank&quot;&gt;Messaging  &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/WebCryptoAPI/&quot; target=&quot;_blank&quot;&gt;Web Cryptography&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/screen-orientation/&quot; target=&quot;_blank&quot;&gt;Screen Orientation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://fetch.spec.whatwg.org/&quot; target=&quot;_blank&quot;&gt;Fetch&lt;/a&gt;&lt;/li&gt;&lt;li&gt; e algumas outras...&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;O principal objetivo do uso de Promise é trabalhar com operações assíncronas, mas de maneira diferente da qual normalmente nos estamos acostumados. Normalmente quando lidamos com operações assíncronas, utilizamos funções &lt;i&gt;callbacks&lt;/i&gt; para tratar as ações de um determinado resultado. As vezes precisamos de ações assíncronas que dependem da resposta de outra operação assíncrona para poder continuar, podendo levar o código a ter &lt;i&gt;callbacks&lt;/i&gt; dentro de &lt;i&gt;callbacks&lt;/i&gt;, o que não fica legal na hora de dar manutenção no código. Veja um exemplo de &lt;i&gt;callbacks&lt;/i&gt; dentro de &lt;i&gt;callbacks&lt;/i&gt;: &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/58ce24b9a7b6f314b2f4&quot;&gt;&lt;/div&gt;Com Promise você pode evitar ter tantos  &lt;i&gt;callbacks&lt;/i&gt; dentro de &lt;i&gt;callbacks&lt;/i&gt; e seu código ficará mais limpo, de fácil leitura, padronizado, com um fluxo de execução mais intuitivo e mais consistente além de um controle de erro mais organizado.&lt;br /&gt;Uma Promise representa o eventual resultado de uma operação assíncrona, onde você pode delegar múltiplas funções de sucesso ou erro para lidar com o resultado da operação assíncrona que pode ser um resultado resolvido com sucesso ou rejeitado com algum erro.&lt;br /&gt;A promise pode ter  estes status:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;fulfilled&lt;/b&gt;    foi resolvida com sucesso &lt;/li&gt;&lt;li&gt;&lt;b&gt;rejected&lt;/b&gt;     foi rejeitada por alguma razão&lt;/li&gt;&lt;li&gt;&lt;b&gt;pending&lt;/b&gt;    status inicial ainda não foi resolvida/rejeitada &lt;/li&gt;&lt;li&gt;&lt;b&gt;settled&lt;/b&gt;   já   foi finalizada sendo resolvida ou rejeitada &lt;/li&gt;&lt;/ul&gt;Uma Promise finalizada só pode ser  resolvida ou rejeitada  e nunca assumir os dois status, ou seja, o primeiro que for setado será o status final, logo somente as funções(métodos) de sucesso ou erros serão executas  e não as duas. Após finalizada, uma promise nunca mudará seu status.  &lt;br /&gt;&lt;h2&gt;Conhecendo um pouco a API&lt;/h2&gt;&lt;h3&gt;Construtor&lt;/h3&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/929a4ac01b33e1b88949&quot;&gt;&lt;/div&gt;O construtor Promise recebe uma  function que possui dois parametros '&lt;b&gt;resolve&lt;/b&gt;' e '&lt;b&gt;reject&lt;/b&gt;' que são as  functions que resolverão a promise, para  resolver com sucesso use a function 'resolve' caso queira rejeitar com erro  use '&lt;b&gt;reject&lt;/b&gt;'.&lt;br /&gt;Observações:  caso ocorra uma Exception dentro da function do construtor Promise, a promise será rejeitada automaticamente, caso  chame &lt;b&gt;resolve&lt;/b&gt; com um valor que seja uma Promise, então a promise atual respeitará a finalização da promise enviada no &lt;b&gt;resolve&lt;/b&gt;, e assim por diante.    &lt;br /&gt;&lt;h3&gt;Métodos &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Método &lt;b&gt;then:&lt;/b&gt;    &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/0a72fb9108804f63b09d&quot;&gt;&lt;/div&gt;O método &lt;b&gt;then&lt;/b&gt; é o cara onde nos registraremos as funções de sucesso(&lt;b&gt;onResolve&lt;/b&gt;) ou de erro(&lt;b&gt;onReject&lt;/b&gt;) da promise. Ele possui dois parâmetros:  &lt;ul&gt;&lt;li&gt;&lt;b&gt;onResolve&lt;/b&gt;: é a function que será executada quando  a promise  for finalizada com  sucesso(quando chamamos o &lt;b&gt;resolve&lt;/b&gt;). &lt;b&gt;onResolve&lt;/b&gt; recebe como parâmetro o valor resolvido na promise.   &lt;/li&gt;&lt;li&gt;&lt;b&gt;onReject&lt;/b&gt;: é a function que será executada quando  a promise  for rejeitada por algum motivo(quando chamamos o &lt;b&gt;reject&lt;/b&gt; ou ocorreu uma Exception). &lt;b&gt;onReject&lt;/b&gt; recebe como parâmetro o motivo do erro. &lt;/li&gt;&lt;/ul&gt;Tanto &lt;b&gt;onResolve&lt;/b&gt; como &lt;b&gt;onReject&lt;/b&gt; são executadas com o contexto vazio, logo o this delas é undefined (no modo strict). &lt;br /&gt;O método &lt;b&gt;then&lt;/b&gt; pode ser chamado várias vezes, logo podemos registrar  várias funções de sucesso e erro, sendo que elas serão chamadas na ordem em que foram registradas.&lt;br /&gt;O &lt;b&gt;then&lt;/b&gt; retorna uma nova instância de Promise (vamos chamar de B), B será resolvida quando a Promise anterior(a que chamou &lt;b&gt;then&lt;/b&gt; que gerou a Promise B) for finalizada, seja no &lt;b&gt;onResolve&lt;/b&gt; ou no &lt;b&gt;onReject&lt;/b&gt;, considerando a mesma regra de resolução de uma Promise, caso &lt;b&gt;onResolve&lt;/b&gt; ou  &lt;b&gt;onReject&lt;/b&gt;  gere um Exception, B será rejeitada, caso  retorne um valor  que não seja uma Promise, B será resolvida com sucesso,     caso   retorne uma nova Promise C a Promise B respeitará a finalização desta nova Promise C retornada, e assim sucessivamente gerando um encadeamento de Promises.&lt;br /&gt; Observação: no encadeamento das Promises caso uma Promise subsequente não registre &lt;b&gt;onResolve&lt;/b&gt; ou  &lt;b&gt;onReject&lt;/b&gt; a finalização será passada para a próxima Promise que registrou(&lt;b&gt;onResolve&lt;/b&gt; ou  &lt;b&gt;onReject&lt;/b&gt;, de acordo com o resolução da Promise).  &lt;br /&gt;&lt;br /&gt;  &lt;/li&gt;&lt;li&gt;Método &lt;b&gt;catch&lt;/b&gt;: &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/fa889257efd838a5d800&quot;&gt;&lt;/div&gt;O método &lt;b&gt;catch&lt;/b&gt; é apenas uma atalho para Promise.prototype.then(undefined, onReject);   ou seja é como se chama-se o &lt;b&gt;then&lt;/b&gt;  passando somente o &lt;b&gt;onReject&lt;/b&gt;. Possui as mesmas regras do &lt;b&gt;then&lt;/b&gt;. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Exemplo  &lt;b&gt;then&lt;/b&gt;/&lt;b&gt;catch&lt;/b&gt;: &lt;br /&gt;&lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/756b45f71f3cc6b7f39d&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Métodos Estáticos&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Método &lt;b&gt;Promise.all(arrayPromises)&lt;/b&gt;&lt;br /&gt; Retorna uma Promise 'A' que é finalizada quando todas as Promises passadas em &lt;i&gt;arrayPromises&lt;/i&gt;  forem finalizadas,    'A' será resolvida com sucesso caso todas as  &lt;i&gt;arrayPromises&lt;/i&gt; sejam resolvidas com sucesso, caso alguma seja rejeitada   a Promise 'A' será rejeitada também. &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/06f445d19aa4621dfe54&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Método &lt;b&gt;Promise.race(arrayPromises)&lt;/b&gt;&lt;br /&gt; Retorna uma Promise 'A' que é finalizada quando a primeira Promise passada em &lt;i&gt;arrayPromises&lt;/i&gt;  for finalizada,    'A' será finalizada conforme a Promise que foi finalizada em &lt;i&gt;arrayPromises&lt;/i&gt;.  &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/67137f358002b7c9dca6&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Método &lt;b&gt;Promise.resolve(valor)&lt;/b&gt;&lt;br /&gt;Retorna uma Promise que é resolvida com   &lt;i&gt;valor&lt;/i&gt;. &lt;br /&gt; Caso o &lt;i&gt;valor&lt;/i&gt; seja: &lt;ul&gt;&lt;li&gt;uma Promise, então esta será retornada &lt;/li&gt;&lt;li&gt;um objeto 'A' que possui método  &lt;b&gt;then&lt;/b&gt;, então retorna uma Promise que será resolvida de acordo com o &lt;b&gt;then&lt;/b&gt; de 'A'.&lt;/li&gt;&lt;li&gt;um valor não-Promise, então retorna uma Promise resolvida com &lt;i&gt;valor&lt;/i&gt; &lt;/li&gt;&lt;/ul&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/8299cccb95c69faca829&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Método &lt;b&gt;Promise.reject(erro)&lt;/b&gt;&lt;br /&gt;Retorna uma Promise rejeitada com o &lt;i&gt;erro&lt;/i&gt;.  &lt;div data-gist=&quot;https://gist.github.com/victorvhpg/61fff2ecedc3a62a7f88&quot;&gt;&lt;/div&gt;&lt;br /&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h2&gt; Comparação Callbacks vs  Promises&lt;/h2&gt;Como podemos ver, com Promise não precisamos ter &lt;i&gt;callbacks&lt;/i&gt; dentro de &lt;i&gt;callbacks&lt;/i&gt;, apenas podemos usar Promises encadeadas.&lt;br /&gt;Veja uma comparação: &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/779b31eabfcb55f7a45d&quot;&gt;&lt;/div&gt;&lt;h2&gt;Exemplo usando ajax com Promise&lt;/h2&gt;Agora vou mostrar um exemplo de  Ajax utilizando Promises, ajax é um cenário ideal para Promises ;)&lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/42b0bd468f78c354060e&quot;&gt;&lt;/div&gt;&lt;h2&gt; Links para Aprender mais&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2014/10/es6-promises-api.html&quot; target=&quot;_blank&quot;&gt;http://www.2ality.com/2014/10/es6-promises-api.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot; target=&quot;_blank&quot;&gt;http://www.html5rocks.com/en/tutorials/es6/promises/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://promisesaplus.com/&quot; target=&quot;_blank&quot;&gt;https://promisesaplus.com/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;carregaGist.init();&lt;/script&gt;   </description>
        <pubDate>Mon, 24 Nov 2014 03:10:00 -0200</pubDate>
        <link>https://victorvhpg.github.io//2014/11/24/javascript-promises_23.html</link>
        <guid isPermaLink="true">https://victorvhpg.github.io//2014/11/24/javascript-promises_23.html</guid>
        
        <category>javascript</category>
        
        <category>promise</category>
        
        
      </item>
    
      <item>
        <title>Carregar gist na página de forma assíncrona</title>
        <description>O &lt;a href=&quot;https://gist.github.com/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Gist&lt;/a&gt; tem um problema, quando ele é incorporado de forma assíncrona na página, eu acabei percebendo isso aqui neste blog, o blogger tem um template que carrega os posts de forma assíncrona logo os meus gists não apareciam. &lt;br /&gt;Por exemplo,&amp;nbsp; o código 'embed' que o gist coloca fica assim:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&amp;lt;script src=&quot;https://gist.github.com/victorvhpg/074fec2ff7749ae0cd74.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Se você olhar o código deste arquivo, você verá que o github usa&amp;nbsp; &lt;i&gt;document.write &lt;/i&gt;para escrever, logo isso não funcionará caso você insira o gist&amp;nbsp; de forma&amp;nbsp; assíncrona.&lt;br /&gt;No firefox/chrome aparece um aviso no console, algo parecido com isso:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&quot;Foi ignorada uma chamada para document.write() a partir de um script externo carregado assincronamente.&quot;&amp;nbsp;&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&quot;A call to document.write() from an asynchronously-loaded external script was ignored.&quot;&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;&lt;b&gt;&quot;Failed to execute 'write' on 'Document': It isn't possible to write into a document from an asynchronously-loaded external script unless it is explicitly opened.&quot;&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Existem várias formas de resolver isso, eu acabei fazendo uma solução que utiliza a &quot;API&quot; do gist, ela retorna um json(JSONP) com os dados(html/css) do gist.&lt;br /&gt;Simplesmente obtem o json (JSONP) e exibe no elemento que contem o atributo&lt;br /&gt;&lt;b&gt;data-gist&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Exemplo de uso:&lt;br /&gt;Em vez de usar o &quot;embed&quot;&amp;nbsp; gerado do gist,&amp;nbsp; coloque a URL do gist no &amp;nbsp; atributo &quot;data-gist&quot;&amp;nbsp; do elemento onde você deseja exibir o gist.&lt;br /&gt;&lt;br /&gt;&amp;lt;div data-gist=&quot;https://gist.github.com/victorvhpg/33889d0611905780e253&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;nbsp; &lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/074fec2ff7749ae0cd74&quot;&gt;&lt;script&gt; carregaGist.init(); &lt;/script&gt;&lt;/div&gt;&lt;br /&gt;</description>
        <pubDate>Thu, 20 Nov 2014 00:53:00 -0200</pubDate>
        <link>https://victorvhpg.github.io//2014/11/20/carregar-gist-na-pagina-de-forma.html</link>
        <guid isPermaLink="true">https://victorvhpg.github.io//2014/11/20/carregar-gist-na-pagina-de-forma.html</guid>
        
        <category>github</category>
        
        <category>dicas</category>
        
        
      </item>
    
      <item>
        <title>Clonar todos os repositórios públicos de um usuário no github</title>
        <description>Uma dica rápida caso alguém precise clonar todos os repositórios públicos de um usuário no github é possível usar a API do github para obter dados sobre um usuário e a partir  disso fazer um script que executa um &quot;git clone&quot; para cada repositório.  &lt;br /&gt;&lt;br /&gt;segue o script:    &lt;br /&gt;&lt;br /&gt;&lt;div data-gist=&quot;https://gist.github.com/victorvhpg/33889d0611905780e253&quot;&gt;&lt;script&gt; carregaGist.init(); &lt;/script&gt;&lt;/div&gt;</description>
        <pubDate>Wed, 19 Nov 2014 22:38:00 -0200</pubDate>
        <link>https://victorvhpg.github.io//2014/11/19/clonar-todos-os-repositorios-publicos.html</link>
        <guid isPermaLink="true">https://victorvhpg.github.io//2014/11/19/clonar-todos-os-repositorios-publicos.html</guid>
        
        <category>git</category>
        
        <category>github</category>
        
        <category>dicas</category>
        
        
      </item>
    
  </channel>
</rss>
